{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [],
    "directives": [
        {
            "name": "NgNumberInputFormatDirective",
            "id": "directive-NgNumberInputFormatDirective-0c07272c96fc9122b3599e577690e92b",
            "file": "projects/ng-number-input-format/src/lib/ng-number-input-format.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\n@Directive({\n  selector: 'input[ngNumberInputFormatDirective]'\n})\nexport class NgNumberInputFormatDirective {\n\n  constructor(\n    protected elementRef: ElementRef<HTMLInputElement>,\n    protected ngmodel: NgModel,\n  ) {\n  }\n\n  // @HostListener('input', ['$event'])\n  // public handleHostListenerInput(evt: InputEvent) {\n  //   console.log(evt);\n  //   const val = this.elementRef.nativeElement.value;\n  //   this.ngmodel.control.setValue(this.instance.getNumber(), );\n  //   this.elementRef.nativeElement.value = val;\n  // }\n}\n",
            "selector": "input[ngNumberInputFormatDirective]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLInputElement>"
                    },
                    {
                        "name": "ngmodel",
                        "type": "NgModel"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLInputElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngmodel",
                        "type": "NgModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "NgNumberInputFormatComponent",
            "id": "component-NgNumberInputFormatComponent-04094037ada1076d3f4ec6409bdbece8",
            "file": "projects/ng-number-input-format/src/lib/ng-number-input-format.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ng-number-input-format",
            "styleUrls": [],
            "styles": [],
            "template": "<input (keydown)=\"handleInputKeydown($event)\" (keyup)=\"handleInputKeyup($event)\" (input)=\"handleInputChange($event)\" #input [disabled]=\"disabled\" [readOnly]=\"readonly\" />",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 36
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 30
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "line": 33
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cursorEnd",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "cursorStart",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "elementRef",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "amountOfCommaToPos",
                    "args": [
                        {
                            "name": "pos",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "pos",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "InputEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "InputEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInputKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInputKeyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\n@Component({\n  selector: 'ng-number-input-format',\n  template: `<input (keydown)=\"handleInputKeydown($event)\" (keyup)=\"handleInputKeyup($event)\" (input)=\"handleInputChange($event)\" #input [disabled]=\"disabled\" [readOnly]=\"readonly\" />`,\n  styles: [\n  ]\n})\nexport class NgNumberInputFormatComponent implements OnInit {\n\n  public get typeof() {\n    return typeof this.value;\n  }\n\n  constructor() {\n  }\n\n\n  private get rawValue() {\n    return this.elementRef.nativeElement.value;\n  }\n  private get floatValue() {\n    let val = parseFloat(this.rawValue.replace(/,/g, ''));\n    if (isNaN(val)) {\n      val = 0;\n    }\n    return val;\n  }\n\n  @Input()\n  public readonly = false;\n\n  @Input()\n  public value = 0;\n\n  @Input()\n  public disabled = false;\n\n  @Output()\n  public readonly valueChange = new EventEmitter<number>();\n\n  @ViewChild('input')\n  private elementRef: ElementRef<HTMLInputElement>;\n\n  private cursorStart?: number;\n  private cursorEnd?: number;\n\n  private amountOfCommaToPos(pos: number) {\n    return this.rawValue.substring(0, pos).split('').reduce((curr, n) => {\n      if (n === ',') {\n        curr++;\n      }\n      return curr;\n    }, 0);\n  }\n\n  public ngOnInit(): void {\n  }\n  public handleInputKeydown(event: KeyboardEvent) {\n    console.log('keydown', event);\n    /**\n     * find position of cursor after keydown\n     */\n  }\n\n  public handleInputChange(event: InputEvent) {\n    console.log('input', event);\n    this.cursorStart = this.elementRef.nativeElement.selectionStart;\n    this.cursorEnd = this.elementRef.nativeElement.selectionEnd;\n    if (/^[0-9]*$/.test(this.rawValue.replace(/,/g, ''))) {\n      const val = this.floatValue;\n      this.elementRef.nativeElement.value = val.toLocaleString();\n      this.valueChange.emit(val);\n      this.value = val;\n    }\n  }\n  public handleInputKeyup(event: KeyboardEvent) {\n    console.log('keyup', event);\n    console.log('comma = ', this.amountOfCommaToPos(this.cursorStart));\n    /**\n     * restore position of cursor\n     */\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "typeof": {
                    "name": "typeof",
                    "getSignature": {
                        "name": "typeof",
                        "type": "",
                        "returnType": "",
                        "line": 10
                    }
                },
                "rawValue": {
                    "name": "rawValue",
                    "getSignature": {
                        "name": "rawValue",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                },
                "floatValue": {
                    "name": "floatValue",
                    "getSignature": {
                        "name": "floatValue",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "NgNumberInputFormatModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgNumberInputFormatComponent"
                        },
                        {
                            "name": "NgNumberInputFormatDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgNumberInputFormatComponent"
                        },
                        {
                            "name": "NgNumberInputFormatDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-number-input-format/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, { disabled: true })"
            },
            {
                "name": "DisabledWithValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, { disabled: true, value: 2000.33 })"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({ }, { value: 0.00 })"
            },
            {
                "name": "Readonly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, {readonly: true, value: 10.312, })"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-number-input-format/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SetValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "Story<NgNumberInputFormatComponent>",
                "defaultValue": "(args: NgNumberInputFormatComponent) => ({\n  props: args,\n  template: `\n    <ng-number-input-format #input [disabled]=\"disabled\" [(value)]=\"value\" [readonly]=\"readonly\"></ng-number-input-format>\n    {{value}}\n    {{input.typeof}}\n\n    <button (click)=\"value = 20123.33\">set value to 20123.33</button>\n    <button (click)=\"value=value+301.21\">add 301.21</button>\n\n    <ng-number-input-format #dd></ng-number-input-format>\n    {{dd.value}}\n  `,\n})"
            },
            {
                "name": "TwoWayBinding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, { value: 10.12 })"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/ng-number-input-format/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-number-input-format/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-number-input-format/src/test.ts",
                    "type": "literal type"
                }
            ],
            "stories/ng-number-input-format.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, { disabled: true })"
                },
                {
                    "name": "DisabledWithValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, { disabled: true, value: 2000.33 })"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({ }, { value: 0.00 })"
                },
                {
                    "name": "Readonly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, {readonly: true, value: 10.312, })"
                },
                {
                    "name": "SetValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "Story<NgNumberInputFormatComponent>",
                    "defaultValue": "(args: NgNumberInputFormatComponent) => ({\n  props: args,\n  template: `\n    <ng-number-input-format #input [disabled]=\"disabled\" [(value)]=\"value\" [readonly]=\"readonly\"></ng-number-input-format>\n    {{value}}\n    {{input.typeof}}\n\n    <button (click)=\"value = 20123.33\">set value to 20123.33</button>\n    <button (click)=\"value=value+301.21\">add 301.21</button>\n\n    <ng-number-input-format #dd></ng-number-input-format>\n    {{dd.value}}\n  `,\n})"
                },
                {
                    "name": "TwoWayBinding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, { value: 10.12 })"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ng-number-input-format/src/lib/ng-number-input-format.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgNumberInputFormatComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ng-number-input-format/src/lib/ng-number-input-format.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgNumberInputFormatDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-number-input-format/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-number-input-format/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledWithValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Readonly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TwoWayBinding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}